import {Component, Input, EventEmitter, ElementRef, Output} from '@angular/core';
import {Observable} from "rxjs";


@Component({
    selector: 'ndv-search',
    styles: [`
       #ndv-ic {
        margin-left: 10px;
        color: #d9d9d9;
        }
       
        .ndv-buttons {
            background-color: #f0f0f0;
            border: 1px solid #ccc;
            border-top: none;
            border-radius: 0 0 10px 10px;
            box-shadow: 0 3px 6px rgba(164,164,164,0.2);
            outline: none;
            padding: 3px;
            position: absolute;
            margin-left: 6px;
            z-index: 1;
        }
       
        
    `],
    template: `<span *ngIf="!permission" [innerHTML] = "text"></span>
                <div *ngIf="permission">
                 
                    <div  *ngIf ="multi"> <p-autoComplete (click)="makeEditable()"  
                        [(ngModel)]="text" 
                        [suggestions]="suggestions" 
                        (completeMethod)="completeMethodIntern($event)"
                        [multiple] ="true"
                       ></p-autoComplete>
                        </div>
                     <div  *ngIf ="!multi"> <p-autoComplete  (click) = "makeEditable()"  
                        [(ngModel)]="text" 
                        [suggestions]="suggestions" 
                        (completeMethod)="completeMethodIntern($event)">
                     </p-autoComplete>
                    </div>
                </div>
                <div class='ndv-buttons' *ngIf='show'>
                    <button class='btn btn-outline-success btn-sm' (click)='callSave()'><i class="fa fa-check-circle" aria-hidden="true"></i></button>
                    <button class='btn btn-outline-danger btn-sm' (click)='cancelEditable()'><i class="fa fa-times" aria-hidden="true"></i></button>
                </div>`,
    host: {
        "(document: click)": "compareEvent($event)",
        "(click)": "trackEvent($event)"
    },
    outputs: ['save : onSave',
               'sug : onSug']
})

export class NdvEditSearchComponent {
    @Input('placeholder') text;
    @Input('title') fieldName;
    @Input() permission = true;
    @Input('suggestions') suggestions;
    @Input('completeMethod') completeMethod ;
    @Input('multi') multi : boolean

    originalText;
    tracker;
    el: ElementRef;
    show = false;
    sug = new EventEmitter;
    save = new EventEmitter;
    constructor(el: ElementRef) {
        this.el = el;
        this.suggestions =['duoa', 'waldek']

    }

    ngOnInit() {
        this.originalText = this.text;    //Saves a copy of the original field info.
    }

    makeEditable() {
        if (this.show == false) {
            this.show = true;
        }
    }

    compareEvent(globalEvent) {
        if (this.tracker != globalEvent && this.show) {
            this.cancelEditable();
        }
    }

    trackEvent(newHostEvent) {
        this.tracker = newHostEvent;
    }

    cancelEditable() {
        this.show = false;
        this.text = this.originalText;
    }
    completeMethodIntern(event){
        this.sug.emit(event);
    }

    callSave() {
        var data = {};  //BUILD OBJ FOR EXPORT.
        data["" + this.fieldName] = this.text;
        var oldText = this.text;
        setTimeout(() => { this.originalText = oldText; this.text = oldText }, 0);  //Sets the field with the new text;
        this.save.emit(data);
        this.show = false;

    }
}
